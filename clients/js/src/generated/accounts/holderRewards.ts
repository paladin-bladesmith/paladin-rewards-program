/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';

export type HolderRewards = {
  lastRewardsPerToken: bigint;
  lastSeenTotalRewards: bigint;
  unharvestedRewards: bigint;
};

export type HolderRewardsArgs = {
  lastRewardsPerToken: number | bigint;
  lastSeenTotalRewards: number | bigint;
  unharvestedRewards: number | bigint;
};

export function getHolderRewardsEncoder(): Encoder<HolderRewardsArgs> {
  return getStructEncoder([
    ['lastRewardsPerToken', getU128Encoder()],
    ['lastSeenTotalRewards', getU64Encoder()],
    ['unharvestedRewards', getU64Encoder()],
  ]);
}

export function getHolderRewardsDecoder(): Decoder<HolderRewards> {
  return getStructDecoder([
    ['lastRewardsPerToken', getU128Decoder()],
    ['lastSeenTotalRewards', getU64Decoder()],
    ['unharvestedRewards', getU64Decoder()],
  ]);
}

export function getHolderRewardsCodec(): Codec<
  HolderRewardsArgs,
  HolderRewards
> {
  return combineCodec(getHolderRewardsEncoder(), getHolderRewardsDecoder());
}

export function decodeHolderRewards<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<HolderRewards, TAddress>;
export function decodeHolderRewards<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<HolderRewards, TAddress>;
export function decodeHolderRewards<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<HolderRewards, TAddress> | MaybeAccount<HolderRewards, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getHolderRewardsDecoder()
  );
}

export async function fetchHolderRewards<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<HolderRewards, TAddress>> {
  const maybeAccount = await fetchMaybeHolderRewards(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeHolderRewards<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<HolderRewards, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeHolderRewards(maybeAccount);
}

export async function fetchAllHolderRewards(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<HolderRewards>[]> {
  const maybeAccounts = await fetchAllMaybeHolderRewards(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeHolderRewards(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<HolderRewards>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeHolderRewards(maybeAccount));
}

export function getHolderRewardsSize(): number {
  return 32;
}
